name: Unit & Integration Tests
on:
  push:
    branches:
      - main
jobs:
  test-mysql:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    #container: joshjamison/python38:latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Provide the password for postgres
        ports:
          - 6379:6379
      mysql:
        # Docker Hub image
        image: mysql
        # Provide the password for postgres
        env:
          MYSQL_USER: mysqltestuser
          MYSQL_PASSWORD: abcd1234
          MYSQL_ROOT_PASSWORD: abcd1234
          MYSQL_DATABASE: database
        ports:
          - 3306:3306
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -r requirements-test.txt
      - name: Run Tests - mysql
        run: |
          for env in mysql; do
            export ENV=$env; 
            pytest tests/test_database.py -s -x;
            pytest tests/test_integration_fastapi.py -s -x;
            pytest tests/test_model_1_to_1.py -s -x;
            pytest tests/test_model_advanced.py -s -x;
            pytest tests/test_model_connections.py -s -x;
            pytest tests/test_model_counting.py -s -x;
            pytest tests/test_model_deletions.py -s -x;
            pytest tests/test_model_filtering_operators.py -s -x;
            pytest tests/test_model_insertions.py -s -x;
            pytest tests/test_model_limit_offset.py -s -x;
            pytest tests/test_model_many_to_many.py -s -x;
            pytest tests/test_models.py -s -x;
            pytest tests/test_model_updates.py -s -x;
            pytest tests/test_query_caching.py -s -x;
            pytest tests/test_querying.py -s -x;
            pytest tests/test_query_no_caching.py -s -x;
            for mig_test in {0..8}; do 
              pytest tests/migrations/test_model_migration_$mig_test.py;
            done
          done

  # Label of the container job
  test-sqlite:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    #container: joshjamison/python38:latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Provide the password for postgres
        ports:
          - 6379:6379
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -r requirements-test.txt
      - name: Run Tests - Sqlite
        run: |
          for env in sqlite; do
            export ENV=$env; 
            pytest tests/test_database.py -s -x;
            pytest tests/test_integration_fastapi.py -s -x;
            pytest tests/test_model_1_to_1.py -s -x;
            pytest tests/test_model_advanced.py -s -x;
            pytest tests/test_model_connections.py -s -x;
            pytest tests/test_model_counting.py -s -x;
            pytest tests/test_model_deletions.py -s -x;
            pytest tests/test_model_filtering_operators.py -s -x;
            pytest tests/test_model_insertions.py -s -x;
            pytest tests/test_model_limit_offset.py -s -x;
            pytest tests/test_model_many_to_many.py -s -x;
            pytest tests/test_models.py -s -x;
            pytest tests/test_model_updates.py -s -x;
            pytest tests/test_query_caching.py -s -x;
            pytest tests/test_querying.py -s -x;
            pytest tests/test_query_no_caching.py -s -x;
            for mig_test in {0..8}; do 
              pytest tests/migrations/test_model_migration_$mig_test.py;
            done
          done
  test-postgres:
    needs: test-mysql
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    #container: joshjamison/python38:latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Provide the password for postgres
        ports:
          - 6379:6379
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: database
        ports:
          - 5432:5432

        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -r requirements-test.txt
      - name: Run Tests - postgres
        run: |
          for env in postgres; do
            export ENV=$env; 
            pytest tests/test_database.py -s -x;
            pytest tests/test_integration_fastapi.py -s -x;
            pytest tests/test_model_1_to_1.py -s -x;
            pytest tests/test_model_advanced.py -s -x;
            pytest tests/test_model_connections.py -s -x;
            pytest tests/test_model_counting.py -s -x;
            pytest tests/test_model_deletions.py -s -x;
            pytest tests/test_model_filtering_operators.py -s -x;
            pytest tests/test_model_insertions.py -s -x;
            pytest tests/test_model_limit_offset.py -s -x;
            pytest tests/test_model_many_to_many.py -s -x;
            pytest tests/test_models.py -s -x;
            pytest tests/test_model_updates.py -s -x;
            pytest tests/test_query_caching.py -s -x;
            pytest tests/test_querying.py -s -x;
            pytest tests/test_query_no_caching.py -s -x;
            for mig_test in {0..8}; do 
              pytest tests/migrations/test_model_migration_$mig_test.py;
            done
          done